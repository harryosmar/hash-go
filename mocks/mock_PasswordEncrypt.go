// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/harryosmar/hash-go (interfaces: PasswordEncrypt)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordEncrypt is a mock of PasswordEncrypt interface.
type MockPasswordEncrypt struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordEncryptMockRecorder
}

// MockPasswordEncryptMockRecorder is the mock recorder for MockPasswordEncrypt.
type MockPasswordEncryptMockRecorder struct {
	mock *MockPasswordEncrypt
}

// NewMockPasswordEncrypt creates a new mock instance.
func NewMockPasswordEncrypt(ctrl *gomock.Controller) *MockPasswordEncrypt {
	mock := &MockPasswordEncrypt{ctrl: ctrl}
	mock.recorder = &MockPasswordEncryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordEncrypt) EXPECT() *MockPasswordEncryptMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockPasswordEncrypt) Encrypt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockPasswordEncryptMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPasswordEncrypt)(nil).Encrypt), arg0)
}

// Validate mocks base method.
func (m *MockPasswordEncrypt) Validate(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPasswordEncryptMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPasswordEncrypt)(nil).Validate), arg0, arg1)
}
